Observations:
in top, "a.out" runs at 100%, the first grep runs at 50%, the second grep runs at 15%
--> there is parallelism due to the piped commands
--> most of the work is done generating permutations, with second heaviest workload being the first grep.

For this use case of finding the first match,
this method may be faster than the breadth-first transition table lookup approach

$ gcc permutations_from_rosetta.c

$ python grep_filters.py  2 2 egrep
egrep "1 (2|3)"|egrep "2 (1|4)"|egrep "3 (4|1)"|egrep "4 (3|2)"
$ ./a.out 4 | egrep "1 (2|3)"|egrep "2 (1|4)"|egrep "3 (4|1)"
2 1 3 4
3 1 2 4

$ python grep_filters.py 3 3 egrep
egrep "1 (2|4)"|egrep "2 (1|3|5)"|egrep "3 (2|6)"|egrep "4 (5|1|7)"|egrep "5 (4|6|2|8)"|egrep "6 (5|3|9)"|egrep "7 (8|4)"|egrep "8 (7|9|5)"|egrep "9 (8|6)"

$ ./a.out 9 | egrep "1 (2|4)"|egrep "2 (1|3|5)"|egrep "3 (2|6)"|egrep "4 (5|1|7)"|egrep "5 (4|6|2|8)"|egrep "6 (5|3|9)"|egrep "7 (8|4)"|egrep "8 (7|9|5)"
1 2 3 6 5 4 7 8 9
3 6 5 2 1 4 7 8 9
5 6 3 2 1 4 7 8 9
7 4 1 2 3 6 5 8 9
7 8 5 4 1 2 3 6 9
5 8 7 4 1 2 3 6 9
1 4 7 8 5 2 3 6 9
3 2 1 4 7 8 5 6 9

$ python grep_filters.py 3 3 egrep
$ date; time ./a.out 9 | egrep "1 (2|4)"|egrep "2 (1|3|5)"|egrep "3 (2|6)"|egrep "4 (5|1|7)"|egrep "5 (4|6|2|8)"|egrep "6 (5|3|9)"|egrep "7 (8|4)"|egrep "8 (7|9|5)" | wc -l; date
Sat Aug  5 12:20:46 EDT 2017
       8
real	0m0.636s
user	0m1.039s
sys	0m0.031s
Sat Aug  5 12:20:47 EDT 2017

$ python grep_filters.py 4 4 egrep
$ date; time ./a.out 16 | egrep "1 (2|5)"|egrep "2 (1|3|6)"|egrep "3 (2|4|7)"|egrep "4 (3|8)"|egrep "5 (6|1|9)"|egrep "6 (5|7|2|10)"|egrep "7 (6|8|3|11)"|egrep "8 (7|4|12)"|egrep "9 (10|5|13)"|egrep "10 (9|11|6|14)"|egrep "11 (10|12|7|15)"|egrep "12 (11|8|16)"|egrep "13 (14|9)"|egrep "14 (13|15|10)"|egrep "15 (14|16|11)"|wc -l; date

--> more than 7 minutes